// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Regras para perfis de usuários
    match /users/{userId} {
      // Usuário só pode ler/escrever seus próprios dados
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Permitir criação de perfil durante registro
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.data.keys().hasAll(['email', 'createdAt'])
        && request.resource.data.email == request.auth.token.email;
    }
    
    // Regras para tarefas
    match /tasks/{taskId} {
      // Só o dono da tarefa pode acessar
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Permitir criação de nova tarefa
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && request.resource.data.keys().hasAll(['title', 'userId', 'createdAt'])
        && request.resource.data.title is string
        && request.resource.data.title.size() > 0
        && request.resource.data.title.size() <= 200;
      
      // Validações para atualizações
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && request.resource.data.userId == resource.data.userId; // Não permite mudança de dono
    }
    
    // Regras para transações financeiras
    match /transactions/{transactionId} {
      // Só o dono da transação pode acessar
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Permitir criação de nova transação
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && request.resource.data.keys().hasAll(['description', 'amount', 'type', 'userId', 'date'])
        && request.resource.data.description is string
        && request.resource.data.description.size() > 0
        && request.resource.data.description.size() <= 200
        && request.resource.data.amount is number
        && request.resource.data.amount > 0
        && request.resource.data.type in ['income', 'expense'];
      
      // Validações para atualizações
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && request.resource.data.userId == resource.data.userId
        && request.resource.data.amount > 0;
    }
    
    // Regras para metas financeiras
    match /goals/{goalId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && request.resource.data.keys().hasAll(['title', 'targetValue', 'userId', 'createdAt'])
        && request.resource.data.title is string
        && request.resource.data.targetValue is number
        && request.resource.data.targetValue > 0;
    }
    
    // Regras para categorias personalizadas
    match /categories/{categoryId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && request.resource.data.keys().hasAll(['name', 'type', 'userId'])
        && request.resource.data.name is string
        && request.resource.data.type in ['task', 'finance'];
    }
    
    // Regras para configurações do usuário
    match /settings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      allow create: if request.auth != null 
        && request.auth.uid == userId;
    }
    
    // Função auxiliar para validar dados
    function isValidUser() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidString(field, minLength, maxLength) {
      return field is string 
        && field.size() >= minLength 
        && field.size() <= maxLength;
    }
    
    function isValidNumber(field, min, max) {
      return field is number 
        && field >= min 
        && field <= max;
    }
    
    // Negar acesso a tudo que não foi especificado
    match /{document=**} {
      allow read, write: if false;
    }
  }
}